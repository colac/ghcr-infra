name: 'Terraform'

on:
  push:
    branches:
      - "main"
      - "preprd"
      - "tst"
  #pull_request:
  #  branches:

  
#permissions:
  #contents: read

jobs:

  terraform:
    name: Terraform
    #needs: az-login
    runs-on: ubuntu-latest
    environment: $GITHUB_BASE_REF
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: List of the GitHub Actions environment variables on Windows
      run: env

    # # Perform az login
    # - name: Azure Login
    #   uses: Azure/login@v1
    #   with:
    #     creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      #with:
        #cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      env:
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      run: terraform init
      
    - name: Terraform workspace new $GITHUB_REF_NAME
      env:
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      run: terraform workspace new $GITHUB_REF_NAME
      continue-on-error: true
      
    - name: Terraform workspace select $GITHUB_REF_NAME
      env:
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      run: terraform workspace select $GITHUB_REF_NAME
      
    # # Checks that all Terraform configuration files adhere to a canonical format
    # - name: Terraform Format
    #   run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      env:
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      run: terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.event_name == 'push' #github.ref == 'refs/heads/"main"' &&
      env:
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      run: terraform apply -auto-approve -input=false

  scoutsuite:
    needs: terraform
    runs-on: ubuntu-latest
    steps:
    #create credfile
    - name: replace json
      run: |
        cat << EOF > credfile.json
        {
            "clientId": "${{ secrets.ARM_CLIENT_ID }}",
            "clientSecret": "${{ secrets.ARM_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.ARM_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.ARM_TENANT_ID }}",
            "activeDirectoryEndpointUrl": "https://login.microsoftonline.com",
            "resourceManagerEndpointUrl": "https://management.azure.com/",
            "activeDirectoryGraphResourceId": "https://graph.windows.net/",
            "sqlManagementEndpointUrl": "https://management.core.windows.net:8443/",
            "galleryEndpointUrl": "https://gallery.azure.com/",
            "managementEndpointUrl": "https://management.core.windows.net/"
          }
        EOF
    - name: docker run
      run: |
        docker run -t -d --name scoutsuitegh ghcr.io/colac/scoutsuite:master
    - name: docker cp inside container
      run: |
        docker cp credfile.json scoutsuitegh:/root/ScoutSuite/credfile.json
    - name: run scoutsuite
      run: |
        docker exec -d scoutsuitegh python3.8 /root/ScoutSuite/scout.py azure --file-auth /root/ScoutSuite/credfile.json --no-browser --report-dir /root/ScoutSuite/scout-report
    - name: Sleep for 120s
      run: sleep 120s
      shell: bash
    - name: docker cp outside container
      run: |
        docker exec scoutsuitegh ls /root/ScoutSuite
        echo "docker exec"
        docker cp $(docker ps -f ancestor=ghcr.io/colac/scoutsuite:master --format "{{.ID}}"):/root/ScoutSuite/README.md ./
        ls -la
        docker cp $(docker ps -f ancestor=ghcr.io/colac/scoutsuite:master --format "{{.ID}}"):/root/ScoutSuite/scout-report ./scoutReport
      continue-on-error: true
    - name: docker rm container
      run: |
        docker stop scoutsuitegh
        docker rm scoutsuitegh
      continue-on-error: true

    - name: Upload Report Artifact
      uses: actions/upload-artifact@v3.1.0
      with:
        name: scoutsuiteReport
        path: ./scoutReport # or path/to/artifact
#delete credfile
  delete-file:
    needs: scoutsuite
    runs-on: ubuntu-latest
    steps:
    - name: delete file
      run: |
        ls -la
        rm -rf credfile.json
        echo "after delete"
        ls -la
